openapi: 3.0.3
tags:
  - name: Auth
  - name: Pets
  - name: Users

# 401 добавить ошибку
paths:


  /register:
    post:
      tags:
        - Auth
      summary: Registering a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SUsers'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SUsers'
        '400':
          description: Bad Request
        '409':
          description: Conflict


  /login:
    post:
      tags:
        - Auth
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SLogin'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '404':
          description: Not Found


  /logout:
    get:
      tags:
        - Auth
      summary: User logout
      responses:
        '200':
          description: Ok


  /pets:
    get:
      tags:
        - Pets
      summary: Get all pets
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPets'
    post:
      tags:
        - Pets
      summary: Add one pet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPets'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
        '403':
          description: Forbidden


  /pets/{pet_id}:
    get:
      tags:
        - Pets
      summary: Get one pet by id
      parameters:
        - name: pet_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPets'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - Pets
      summary: Update one pet by id
      parameters:
        - name: pet_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPets'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPets'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '400':
          description: Bad Request
    delete:
      tags:
        - Pets
      summary: Delete one pet by id
      parameters:
        - name: pet_id
          in: path
          required: true
          schema:
           type: integer
           format: int64
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPets'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found


  /pets/{pet_name}:
    get:
      tags:
        - Pets
      summary: Get pets by name
      parameters:
        - name: pet_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPets'
        '401':
          description: Unauthorized
        '404':
          description: Not Found


  /users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SUsers'
        '401':
          description: Unauthorized
    post:
      tags:
        - Users
      summary: Add one user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SUsers'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '400':
          description: Bad Request


  /users/{client_id}:
    get:
      tags:
        - Users
      summary: Get one client by id
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SUsers'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - Users
      summary: Update one client by id
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SUsers'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SUsers'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '400':
          description: Bad Request
    delete:
      tags:
        - Users
      summary: Delete one client by id
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
           type: integer
           format: int64
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SUsers'
        '401':
          description: Unauthorized
        '404':
          description: Not Found


  /users/{client_lastname}:
    get:
      tags:
        - Users
      summary: Get client by lastname
      parameters:
        - name: client_lastname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SUsers'
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  /users/bind:
    put:
      tags:
        - Users
      summary: Assigning a pet to a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SBind'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found



components:
  schemas:

    SPets:
      required:
        - animal_type
        - name
      type: object
      properties:
        animal_type:
          type: string
          enum:
            - cat
            - dog
            - parrot
        name:
          type: string
          example: Barsik
        birthdate:
          type: string
          example: '2020-01-25'
        sex:
          type: string
          enum:
            - female
            - male
        breed:
          type: string
          enum:
            - husky
            - shepherd
            - mongrel

    SUsers:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: 'test@test.com'
        password:
          type: string
          example: 'test'
        firstname:
          type: string
          example: 'Ivan'
        lastname:
          type: string
          example: 'Ivanov'
        phone:
          type: string
          example: '81231231212'
        sex:
          type: string
          enum:
            - female
            - male
        birthdate:
          type: string
          example: '2020-01-25'

    SLogin:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: 'test@test.com'
        password:
          type: string
          example: 'test'

    SBind:
      required:
        - user_id
        - pet_id
      type: object
      properties:
        user_id:
          type: string
          example: '1'
        pet_id:
          type: string
          example: '4'
#  requestBodies:
#    Pets:
#      description: Pet object that needs to be added to the store
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/Pets'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
